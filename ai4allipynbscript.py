{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-02T16:10:23.338766Z",
     "iopub.status.busy": "2024-11-02T16:10:23.337907Z",
     "iopub.status.idle": "2024-11-02T16:11:03.423665Z",
     "shell.execute_reply": "2024-11-02T16:11:03.422344Z",
     "shell.execute_reply.started": "2024-11-02T16:10:23.338721Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Error loading wordnet: <urlopen error [Errno -3] Temporary\n",
      "[nltk_data]     failure in name resolution>\n",
      "[nltk_data] Error loading stopwords: <urlopen error [Errno -3]\n",
      "[nltk_data]     Temporary failure in name resolution>\n",
      "/kaggle/input/fake-and-real-news-dataset/True.csv\n",
      "/kaggle/input/fake-and-real-news-dataset/Fake.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "\n",
    "import nltk\n",
    "nltk.download('wordnet')\n",
    "nltk.download('stopwords') \n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:03.426046Z",
     "iopub.status.busy": "2024-11-02T16:11:03.425671Z",
     "iopub.status.idle": "2024-11-02T16:11:04.933410Z",
     "shell.execute_reply": "2024-11-02T16:11:04.932472Z",
     "shell.execute_reply.started": "2024-11-02T16:11:03.426005Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "#loading the data\n",
    "fake=pd.read_csv(\"../input/fake-and-real-news-dataset/Fake.csv\")\n",
    "true=pd.read_csv(\"../input/fake-and-real-news-dataset/True.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:04.935177Z",
     "iopub.status.busy": "2024-11-02T16:11:04.934825Z",
     "iopub.status.idle": "2024-11-02T16:11:04.941399Z",
     "shell.execute_reply": "2024-11-02T16:11:04.940285Z",
     "shell.execute_reply.started": "2024-11-02T16:11:04.935140Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "#Creating a category for whether fake or not\n",
    "#where 1 stand for fake news and 0 stands for true news\n",
    "\n",
    "fake[\"category\"]=1\n",
    "true[\"category\"]=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:04.944912Z",
     "iopub.status.busy": "2024-11-02T16:11:04.944397Z",
     "iopub.status.idle": "2024-11-02T16:11:04.961288Z",
     "shell.execute_reply": "2024-11-02T16:11:04.960312Z",
     "shell.execute_reply.started": "2024-11-02T16:11:04.944874Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "#joining the data the two data frame and reseting index\n",
    "df=pd.concat([fake,true]).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:04.963148Z",
     "iopub.status.busy": "2024-11-02T16:11:04.962779Z",
     "iopub.status.idle": "2024-11-02T16:11:04.968942Z",
     "shell.execute_reply": "2024-11-02T16:11:04.967958Z",
     "shell.execute_reply.started": "2024-11-02T16:11:04.963112Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:04.970737Z",
     "iopub.status.busy": "2024-11-02T16:11:04.970385Z",
     "iopub.status.idle": "2024-11-02T16:11:04.979646Z",
     "shell.execute_reply": "2024-11-02T16:11:04.978720Z",
     "shell.execute_reply.started": "2024-11-02T16:11:04.970702Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:04.981117Z",
     "iopub.status.busy": "2024-11-02T16:11:04.980772Z",
     "iopub.status.idle": "2024-11-02T16:11:05.215911Z",
     "shell.execute_reply": "2024-11-02T16:11:05.214809Z",
     "shell.execute_reply.started": "2024-11-02T16:11:04.981083Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creating a count plot for category column\n",
    "fig = plt.figure(figsize=(10,5))\n",
    "\n",
    "\n",
    "\n",
    "graph = sns.countplot(x=\"category\", data=df)\n",
    "plt.title(\"Count of Fake and True News\")\n",
    "\n",
    "#removing boundary\n",
    "graph.spines[\"right\"].set_visible(False)\n",
    "graph.spines[\"top\"].set_visible(False)\n",
    "graph.spines[\"left\"].set_visible(False)\n",
    "\n",
    "#annoting bars with the counts  \n",
    "for p in graph.patches:\n",
    "        height = p.get_height()\n",
    "        graph.text(p.get_x()+p.get_width()/2., height + 0.2,height ,ha=\"center\",fontsize=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:05.217555Z",
     "iopub.status.busy": "2024-11-02T16:11:05.217223Z",
     "iopub.status.idle": "2024-11-02T16:11:05.506993Z",
     "shell.execute_reply": "2024-11-02T16:11:05.505891Z",
     "shell.execute_reply.started": "2024-11-02T16:11:05.217519Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creating a count plot for subject column\n",
    "fig = plt.figure(figsize=(10,5))\n",
    "\n",
    "\n",
    "\n",
    "graph = sns.countplot(x=\"subject\", data=df)\n",
    "plt.title(\"Count of Subjecs\")\n",
    "\n",
    "#removing boundary\n",
    "graph.spines[\"right\"].set_visible(False)\n",
    "graph.spines[\"top\"].set_visible(False)\n",
    "graph.spines[\"left\"].set_visible(False)\n",
    "\n",
    "#annoting bars with the counts  \n",
    "for p in graph.patches:\n",
    "        height = p.get_height()\n",
    "        graph.text(p.get_x()+p.get_width()/2., height + 0.2,height ,ha=\"center\",fontsize=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:05.509505Z",
     "iopub.status.busy": "2024-11-02T16:11:05.508607Z",
     "iopub.status.idle": "2024-11-02T16:11:05.533509Z",
     "shell.execute_reply": "2024-11-02T16:11:05.532375Z",
     "shell.execute_reply.started": "2024-11-02T16:11:05.509453Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "title       0.0\n",
       "text        0.0\n",
       "subject     0.0\n",
       "date        0.0\n",
       "category    0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking the missing values in each columns\n",
    "df.isna().sum()*100/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:05.537749Z",
     "iopub.status.busy": "2024-11-02T16:11:05.537370Z",
     "iopub.status.idle": "2024-11-02T16:11:05.567516Z",
     "shell.execute_reply": "2024-11-02T16:11:05.566259Z",
     "shell.execute_reply.started": "2024-11-02T16:11:05.537712Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "631"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking if there is empty string in TEXT column\n",
    "# Checking if there is an empty string in the TEXT column\n",
    "blanks = []\n",
    "\n",
    "# Iterate through the index and text of each row\n",
    "for index, text in df[\"text\"].items():  # Use items() instead of iteritems()\n",
    "    if text.isspace():  # Check if there is only whitespace\n",
    "        blanks.append(index)  # Append index to the list if it's blank\n",
    "\n",
    "len(blanks)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:05.569125Z",
     "iopub.status.busy": "2024-11-02T16:11:05.568727Z",
     "iopub.status.idle": "2024-11-02T16:11:05.699442Z",
     "shell.execute_reply": "2024-11-02T16:11:05.698229Z",
     "shell.execute_reply.started": "2024-11-02T16:11:05.569086Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "#instead of dropping these values we are going to merge title with text\n",
    "\n",
    "df[\"text\"] =df[\"title\"]+df[\"text\"]\n",
    "\n",
    "#we only need two columns rest can be ignored\n",
    "\n",
    "df=df[[\"text\",\"category\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:05.700938Z",
     "iopub.status.busy": "2024-11-02T16:11:05.700622Z",
     "iopub.status.idle": "2024-11-02T16:11:05.705887Z",
     "shell.execute_reply": "2024-11-02T16:11:05.704839Z",
     "shell.execute_reply.started": "2024-11-02T16:11:05.700905Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "#importing libraries for cleaning puprose\n",
    "\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer \n",
    "import spacy\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:05.707617Z",
     "iopub.status.busy": "2024-11-02T16:11:05.707278Z",
     "iopub.status.idle": "2024-11-02T16:11:06.570701Z",
     "shell.execute_reply": "2024-11-02T16:11:06.569533Z",
     "shell.execute_reply.started": "2024-11-02T16:11:05.707581Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "#loading spacy library\n",
    "nlp=spacy.load(\"en_core_web_sm\")\n",
    "\n",
    "#creating instance\n",
    "lemma=WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:06.573100Z",
     "iopub.status.busy": "2024-11-02T16:11:06.571945Z",
     "iopub.status.idle": "2024-11-02T16:11:06.580679Z",
     "shell.execute_reply": "2024-11-02T16:11:06.579628Z",
     "shell.execute_reply.started": "2024-11-02T16:11:06.573059Z"
    },
    "trusted": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "326\n",
      "179\n",
      "382\n"
     ]
    }
   ],
   "source": [
    "#creating list of stopwords containing stopwords from spacy and nltk\n",
    "\n",
    "#stopwords of spacy\n",
    "list1=nlp.Defaults.stop_words\n",
    "print(len(list1))\n",
    "\n",
    "#stopwords of NLTK\n",
    "list2=stopwords.words('english')\n",
    "print(len(list2))\n",
    "\n",
    "#combining the stopword list\n",
    "Stopwords=set((set(list1)|set(list2)))\n",
    "print(len(Stopwords))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-02T16:11:06.582590Z",
     "iopub.status.busy": "2024-11-02T16:11:06.582255Z",
     "iopub.status.idle": "2024-11-02T16:11:06.592462Z",
     "shell.execute_reply": "2024-11-02T16:11:06.591385Z",
     "shell.execute_reply.started": "2024-11-02T16:11:06.582555Z"
    },
    "trusted": true
   },
   "outputs": [],
   "source": [
    "def clean_text(text):\n",
    "    \n",
    "    \"\"\"\n",
    "    It takes text as an input and clean it by applying several methods\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    string = \"\"\n",
    "    \n",
    "    #lower casing\n",
    "    text=text.lower()\n",
    "    \n",
    "    #simplifying text\n",
    "    text=re.sub(r\"i'm\",\"i am\",text)\n",
    "    text=re.sub(r\"he's\",\"he is\",text)\n",
    "    text=re.sub(r\"she's\",\"she is\",text)\n",
    "    text=re.sub(r\"that's\",\"that is\",text)\n",
    "    text=re.sub(r\"what's\",\"what is\",text)\n",
    "    text=re.sub(r\"where's\",\"where is\",text)\n",
    "    text=re.sub(r\"\\'ll\",\" will\",text)\n",
    "    text=re.sub(r\"\\'ve\",\" have\",text)\n",
    "    text=re.sub(r\"\\'re\",\" are\",text)\n",
    "    text=re.sub(r\"\\'d\",\" would\",text)\n",
    "    text=re.sub(r\"won't\",\"will not\",text)\n",
    "    text=re.sub(r\"can't\",\"cannot\",text)\n",
    "    \n",
    "    #removing any special character\n",
    "    text=re.sub(r\"[-()\\\"#!@$%^&*{}?.,:]\",\" \",text)\n",
    "    text=re.sub(r\"\\s+\",\" \",text)\n",
    "    text=re.sub('[^A-Za-z0-9]+',' ', text)\n",
    "    \n",
    "    for word in text.split():\n",
    "        if word not in Stopwords:\n",
    "            string+=lemma.lemmatize(word)+\" \"\n",
    "    return string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cleaning the whole dataset\n",
    "df[\"text\"]=df[\"text\"].apply(clean_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "making a word cloud to visualize the dataset and differences in vocabulary of fake and true datasets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from wordcloud import WordCloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# word cloud for true news\n",
    "plt.figure(figsize = (20,20))\n",
    "Wc = WordCloud(max_words = 500 , width = 1600 , height = 800).generate(\" \".join(df[df.category == 0].text))\n",
    "plt.axis(\"off\")\n",
    "plt.imshow(Wc , interpolation = 'bilinear')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# word cloud for fake news\n",
    "plt.figure(figsize = (20,20))\n",
    "Wc = WordCloud(max_words = 500 , width = 1600 , height = 800).generate(\" \".join(df[df.category == 1].text))\n",
    "plt.axis(\"off\")\n",
    "plt.imshow(Wc , interpolation = 'bilinear')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "building the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#splitting data between training and testing \n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# don't use labels, just raw text\n",
    "X=df[\"text\"] #feature \n",
    "y=df[\"category\"] # target\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.svm import LinearSVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# vectorize text, then apply tf-idf (isolates differentiating factors)\n",
    "text_clf=Pipeline([(\"tfidf\",TfidfVectorizer()),(\"clf\",LinearSVC())])\n",
    "# then fit the model \n",
    "text_clf.fit(X_train,y_train)\n",
    "\n",
    "# note that pipeline applies the trained model to testing data as well to make predictions automatically to increase efficiency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions=text_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "evaluation and error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics\n",
    "print(metrics.classification_report(y_test,predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(metrics.classification_report(y_test,predictions))\n",
    "\n",
    "# accuracy\n",
    "print(metrics.accuracy_score(y_test,predictions))\n",
    "\n",
    "# confusion matrix\n",
    "print(metrics.confusion_matrix(y_test,predictions))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4831777,
     "sourceId": 8165591,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Julia 1.9.3",
   "language": "julia",
   "name": "julia-1.9"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "julia",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
